.\"     Title: ne_version_match
.\"    Author: 
.\" Generator: DocBook XSL Stylesheets v1.73.2 <http://docbook.sf.net/>
.\"      Date: 20 August 2008
.\"    Manual: neon API reference
.\"    Source: neon 0.28.3
.\"
.TH "NE_VERSION_MATCH" "3" "20 August 2008" "neon 0.28.3" "neon API reference"
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.SH "NAME"
ne_version_match, ne_version_string - library versioning
.SH "SYNOPSIS"
.sp
.ft B
.nf
#include <ne_utils\.h>
.fi
.ft
.HP 21
.BI "int ne_version_match(int\ " "major" ", int\ " "minor" ");"
.HP 30
.BI "const char *ne_version_string(void);"
.SH "DESCRIPTION"
.PP
The
\fBne_version_match\fR
function returns non\-zero if the library version is not of major version
\fImajor\fR, or the minor version is less than
\fIminor\fR\. For neon versions 0\.x, every minor version is assumed to be incompatible with every other minor version\.
.PP
The
\fBne_version_string\fR
function returns a string giving the library version\.
.SH "EXAMPLES"
.PP
To require neon 1\.x, version 1\.2 or later:
.sp
.RS 4
.nf
if (ne_version_match(1, 2)) {
    printf("Library version out of date: 1\.2 required, found %s\.",
           ne_version_string());
    exit(1);
}
.fi
.RE
.SH "AUTHOR"
.PP
\fBJoe Orton\fR <\&neon@lists.manyfish.co.uk\&>
.sp -1n
.IP "" 4
Author.
.SH "COPYRIGHT"
