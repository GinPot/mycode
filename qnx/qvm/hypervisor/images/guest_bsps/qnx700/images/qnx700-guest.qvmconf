# An example guest configuration on an ARM QNX Hypervisor system. This would be used on the Hypervisor host
# to run such a guest.

system qnx7-arm-guest

ram 0x80000000,128M

# Add a 'cpu' for each virtual CPU that the guest will have
cpu
cpu

# Use 'runmask' after 'cpu' entries to fix the virtual CPUs to host physical CPUs
#runmask 0

# This IFS is found in the images/ folder of the guest BSP. Make sure it is available on the
# host at this location (or modify the location appropriately).
load /guests/qnx700/qnx700-guest.ifs

#Pass-through i2c for graphics
pass loc mem:0xe6510000,0x100,rwxe intr gic:318
pass loc mem:0xe66D8000,0x100,rwxe intr gic:51

#Pass-through host-physical memory for graphics
pass loc mem:0x060000000,0x02100000,rwxm=0x060000000
pass loc mem:0x062100000,0x06000000,rwxm=0x062100000
pass loc mem:0x620000000,0x06000000,rwxm=0x620000000

#Pass-through GPU register for guest1
pass loc mem:0xFD000000,0x00030000,rwn=0xFD010000 intr gic:151=151

#Pass-through display registers
pass loc mem:0xFFF00000,0x00001000,rwn=0xFFF00000                    #Product register
pass loc mem:0xFEB00000,0x00030000,rwn=0xFEB00000 ##intr gic:288=288 #DU0 register
pass loc mem:0xFEB30000,0x00010000,rwn=0xFEB30000 ##intr gic:300=300 #DU1 register
pass loc mem:0xFEB40000,0x00030000,rwn=0xFEB40000 intr gic:301=301   #DU2 register
pass loc mem:0xFEB70000,0x00010000,rwn=0xFEB70000 ##intr gic:302=302 #DU3 register
pass loc mem:0xE6150000,0x00001000,rwn=0xE6150000                    #Clock Pulse Generator register
pass loc mem:0xFEA20000,0x00008000,rwn=0xFEA20000 ##intr gic:498=498 #VSPD0 register
pass loc mem:0xFEA28000,0x00008000,rwn=0xFEA28000 ##intr gic:499=499 #VSPD1 register
pass loc mem:0xFEA30000,0x00008000,rwn=0xFEA30000 intr gic:500=500   #VSPD2 register
pass loc mem:0xFEA38000,0x00008000,rwn=0xFEA38000 ##intr gic:501=501 #VSPD3 register
pass loc mem:0xFE9A0000,0x00010000,rwn=0xFE9A0000 ##intr gic:476=476 #VSPI0 register
pass loc mem:0xFE9B0000,0x00010000,rwn=0xFE9B0000 ##intr gic:477=477 #VSPI1 register
pass loc mem:0xFE9C0000,0x00010000,rwn=0xFE9C0000 ##intr gic:478=478 #VSPI2 register
pass loc mem:0xFEAD0000,0x00010000,rwn=0xFEAD0000                    #HDMI0 register
pass loc mem:0xFEAE0000,0x00010000,rwn=0xFEAE0000                    #HDMI1 register
pass loc mem:0xFEB90000,0x00001000,rwn=0xFEB90000                    #LVD register

################
#  MMIO vs PCI virtual devices
#
#  - Note that on systems without PCI services, MMIO mode is used instead of PCI
#  - This means we need to specify the interrupt and location in memory of the device (with loc and intr),
#  that normally would be provided automatically in PCI config space.
#  - The address and interrupt # you choose is somewhat arbitrary, but they must not be
#  in use already.
#  - The address and interrupt you choose will also need to be given to the driver in the guest so it can properly
#  make use of the device.
#  - If PCI is available on the guest, you simply remove/comment-out the 'loc' (address) and 'intr' (interrupt) options on the
#  vdev.
################

#UART
vdev pl011
        # Since we are using virtio-console, point the PL011 at qvm stdout, so we can still see
        # startup driver output (startup uses the PL011)
        hostdev >-
        loc 0x1c090000
        intr gic:37
        name pl011_0

# Use virtio as the main console
vdev virtio-console
        loc 0x20000000
        intr gic:42

# Shared memory virtual device
vdev shmem
        loc 0x1c050000 intr
        gic:38
	name shmem_0

#An example network device that connects to the host.
# To have more than 1 guest with networking
# you need to create additional vdevpeer (or tap) devices
vdev virtio-net
        loc 0x1c0c0000
        intr gic:40
        peer /dev/vdevpeers/vp0
        #Refer to documentation to choose an appropriate value here
	# Use 0 here to work around an issue with io-pkt's bridge interface
        peerfeats 0
        name guest_to_host
#An example network device that connects to the qnx66 guest (if available)
vdev virtio-net
        loc 0x20040000
        intr gic:43
        peer /dev/qvm/qnx66-armv7-guest/guest_to_guest
        #Refer to documentation to choose an appropriate value here
        peerfeats 0x00007fc3 # E.g. Turn on all allowed virtio feature bits
        name guest_to_guest

#An example SP805 watchdog (to use see /scripts/watchdog-start.sh in guest)
vdev wdt-sp805
        loc 0x1c0f0000
