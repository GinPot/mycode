/**************************************************************

    <liujm@thundersoft.com> developed 2018年 10月 31日 星期三 14:40:15 CST
    for grab buffer from shared memory ,display on window

**************************************************************/

#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <ctype.h>
#include <errno.h>
#include <sys/neutrino.h>
//ljm
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <screen/screen.h>
#define NBUFFERS 2

int copy_by_stride(void * dst, void *src,int stride,int *sizeS,int *sizeD)
{
    char *tmpdst = dst;
    char *tmpsrc = src;
    int i;
    int strideD=sizeD[0]*4;//should be 1920x4 byte=7680
    int strideS = sizeS[0]*4;
    for(i=0;i<sizeS[1];i++)
    {
        memcpy(tmpdst,tmpsrc,strideS);//one line copy
        tmpdst += strideD;
        tmpsrc +=strideS;
    }
    return 0;

}

int
main(int argc, char *argv[]) {
    int len;
    unsigned long paddr;
    void *virt_addr;
    void *block_start;
 
	int sizeS[2];
	int size[2];
	int rect[4] = { 0, 0, 100, 100 };
    int rc = -1;
	screen_context_t screen_ctx;
	screen_window_t screen_win;
    sizeS[0] = 1024;
    sizeS[1] = 768;


    paddr = strtoul(argv[1], 0, 0);
    len = strtoul(argv[2], 0, 0);
    printf("grab addre len \n");
//one buffer now

    virt_addr = mmap_device_memory( 0, len, PROT_READ|PROT_WRITE|PROT_NOCACHE, 0, paddr );
    if ( virt_addr == MAP_FAILED ) {
        perror( "mmap_device_memory for physical address 0xb8000 failed" );
        exit( EXIT_FAILURE );
    }

        printf("virt_addr device ptr %p\n",virt_addr);
    //should we use this one
/*
    int tymem_flag = POSIX_TYPED_MEM_ALLOCATE_CONTIG;
    int tymem_fd   = posix_typed_mem_open("/memory/below4G", O_RDWR, tymem_flag);
        if ( tymem_fd <0 ) {
        perror( "open pmem failed" );
        exit( EXIT_FAILURE );
    }
    int block_size;
    struct posix_typed_mem_info typedmem_info;
    posix_typed_mem_get_info(tymem_fd, &typedmem_info);
    block_size = typedmem_info.posix_tmi_length;
    block_start = mmap64(0, block_size, PROT_READ|PROT_WRITE|PROT_NOCACHE,
            MAP_PHYS, tymem_fd, 0);

        if ( block_start == MAP_FAILED ) {
        perror( "mmap64 failed" );
        exit( EXIT_FAILURE );
    }

*/
//qnx window codes
//


#if 0
        rc = screen_create_context(&screen_ctx, 0);
        if (rc) {
            perror("screen_context_create");
            goto fail3;
        }

        rc = screen_create_window(&screen_win, screen_ctx);
        if (rc) {
            perror("screen_create_window");
            goto fail4;
        }

        int format = SCREEN_FORMAT_RGBA8888;
        rc = screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_FORMAT, &format);
        if (rc) {
            perror("screen_set_window_property_iv(SCREEN_PROPERTY_FORMAT)");
            goto fail5;
        }
        /*
           rc = screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_USAGE, &usage);
           if (rc) {
           perror("screen_set_window_property_iv(SCREEN_PROPERTY_USAGE)");
           goto fail5;
           }

           rc = screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_SWAP_INTERVAL, &interval);
           if (rc) {
           perror("screen_set_window_property_iv(SCREEN_PROPERTY_SWAP_INTERVAL)");
           goto fail5;
           }
           */
        if (size[0] > 0 && size[1] > 0) {
            rc = screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_SIZE, size);
            if (rc) {
                perror("screen_set_window_property_iv(SCREEN_PROPERTY_SIZE)");
                goto fail5;
            }
        } else {
            rc = screen_get_window_property_iv(screen_win, SCREEN_PROPERTY_SIZE, size);
            if (rc) {
                perror("screen_get_window_property_iv(SCREEN_PROPERTY_SIZE)");
                goto fail5;
            }
        }



        //	rc = screen_create_window_buffers(screen_win, nbuffers);
        //	rc = screen_create_window_buffers(screen_win, 1);
        screen_buffer_t screen_buffer[NBUFFERS];
        //    screen_buffer[0] = (screen_buffer_t )malloc((sizeof (screen_buffer_t)));
        //    screen_buffer[1] = (screen_buffer_t )malloc((sizeof (screen_buffer_t)));
        //check fail
        int num=0;
        for(num=0; num<NBUFFERS; num++){
            rc = screen_create_buffer(&screen_buffer[num]);
            if (rc <0) {
                perror("screen_create_buffer");
                goto fail5;
            }
        }

        int usage = SCREEN_USAGE_WRITE;
        rc = screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_USAGE, &usage);
        if (rc<0) {
            perror("screen_set_buffer_property_pv1 usage");
            goto fail5;
        }

        rc = screen_set_buffer_property_pv(screen_buffer[0], SCREEN_PROPERTY_POINTER, &virt_addr);
        //   rc = screen_set_buffer_property_pv(screen_buffer[0], SCREEN_PROPERTY_POINTER, &block_start);
        if (rc<0) {
            perror("screen_set_buffer_property_pv1 ");
            goto fail5;
        }

        rc = screen_set_buffer_property_pv(screen_buffer[1], SCREEN_PROPERTY_POINTER, &virt_addr);
        //       rc = screen_set_buffer_property_pv(screen_buffer[1], SCREEN_PROPERTY_POINTER, &block_start);
        if (rc<0) {
            perror("screen_set_buffer_property_pv 2");
            goto fail5;
        }        

        rc = screen_attach_window_buffers(screen_win, NBUFFERS, screen_buffer);
        if (rc<0) {
            perror("screen_attach_window_buffers ");
            goto fail5;
        }


#endif


//soft render
//	screen_context_t screen_ctx;
	if (screen_create_context(&screen_ctx, 0)) {
		perror("screen_context_create");
		return EXIT_FAILURE;
	}


//	screen_window_t screen_win;
	if (screen_create_window(&screen_win, screen_ctx)) {
		perror("screen_create_window");
		return EXIT_FAILURE;
	}

	screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_USAGE, (const int[]){ SCREEN_USAGE_NATIVE });
	screen_set_window_property_cv(screen_win, SCREEN_PROPERTY_ID_STRING, strlen("sw-vsync-win"), "sw-vsync-win");


    	screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_BUFFER_SIZE, sizeS);
	screen_set_window_property_iv(screen_win, SCREEN_PROPERTY_SOURCE_SIZE, sizeS);

	if (screen_create_window_buffers(screen_win, 1)) {
		perror("screen_create_window_buffers");
		return EXIT_FAILURE;
	}

	screen_pixmap_t screen_pix;
	if (screen_create_pixmap(&screen_pix, screen_ctx)) {
		perror("screen_create_pixmap");
		return EXIT_FAILURE;
	}

	screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_FORMAT, (const int[]){ SCREEN_FORMAT_RGBA8888 });
	screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_USAGE, (const int[]){ SCREEN_USAGE_WRITE | SCREEN_USAGE_NATIVE });
	screen_set_pixmap_property_cv(screen_pix, SCREEN_PROPERTY_ID_STRING, strlen("sw-vsync-pix"), "sw-vsync-pix");
	screen_get_window_property_iv(screen_win, SCREEN_PROPERTY_BUFFER_SIZE, size);
	screen_set_pixmap_property_iv(screen_pix, SCREEN_PROPERTY_BUFFER_SIZE, size);


	if (screen_create_pixmap_buffer(screen_pix)) {
		perror("screen_create_pixmap_buffer");
		return EXIT_FAILURE;
	}

	screen_buffer_t screen_pbuf = NULL;
	screen_get_pixmap_property_pv(screen_pix, SCREEN_PROPERTY_RENDER_BUFFERS, (void **)&screen_pbuf);

	void *pointer = NULL;
	screen_get_buffer_property_pv(screen_pbuf, SCREEN_PROPERTY_POINTER, &pointer);
	if (pointer == NULL) {
		perror("screen_get_buffer_property_pv(SCREEN_PROPERTY_POINTER)");
		return EXIT_FAILURE;
	}


	int stride = 0;
	screen_get_buffer_property_iv(screen_pbuf, SCREEN_PROPERTY_STRIDE, &stride);
    printf("stride %d",stride);
    fflush(0);
	if (stride == 0) {
		perror("screen_get_buffer_property_pv(SCREEN_PROPERTY_STRIDE)");
		return EXIT_FAILURE;
	}
 
    rect[2]=size[0];
    rect[3]=size[1];

    printf(" win size %d %d",size[0],size[1]);
    fflush(0);

    {
    int fd = -1;

    copy_by_stride(pointer,virt_addr,stride,sizeS,size);
    //dump dst
        if ((fd = open("pixmapdump.raw", O_WRONLY | O_CREAT, 0)) < 0) {
        printf("%s open failed\n", argv[3]);
        return -1;
    }
       int pixmapsize=size[0]*size[1]*4;
     if (write(fd, pointer, pixmapsize) != pixmapsize)
        printf("write failed\n");

    }
    while(1){
        //draw

        screen_buffer_t screen_wbuf = NULL;
        screen_get_window_property_pv(screen_win, SCREEN_PROPERTY_RENDER_BUFFERS, (void **)&screen_wbuf);
        if (screen_wbuf == NULL) {
            break;
        }
        //memcpy(pointer ,virt_addr,len);
        copy_by_stride(pointer,virt_addr,stride,sizeS,size);
        int i;
        for (i = 0; i < 2; i++) {
            screen_blit(screen_ctx, screen_wbuf, screen_pbuf, (const int []){
                    SCREEN_BLIT_SOURCE_X, 0,
                    SCREEN_BLIT_SOURCE_Y, 0,
                    SCREEN_BLIT_SOURCE_WIDTH, size[0],
                    SCREEN_BLIT_SOURCE_HEIGHT, size[1],
                    SCREEN_BLIT_DESTINATION_X, 0,
                    SCREEN_BLIT_DESTINATION_Y, 0,
                    SCREEN_BLIT_DESTINATION_WIDTH, size[0],
                    SCREEN_BLIT_DESTINATION_HEIGHT, size[1],
                    SCREEN_BLIT_END });
        }

        screen_post_window(screen_win, screen_wbuf, 1, rect, 0);


        //post
        //		screen_post_window(screen_win, screen_buffer[0], 1, rect, 0);
    }
fail5:
    screen_destroy_window(screen_win);
fail4:
	screen_destroy_context(screen_ctx);
fail3:
    munmap_device_memory( virt_addr,
            len );

    return 0;
}
