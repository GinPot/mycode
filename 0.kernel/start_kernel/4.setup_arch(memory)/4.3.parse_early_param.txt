早期解析bootargs参数：

start_kernel()
	...
	setup_arch(&command_line)
	...
	parse_early_param()
		strlcpy(tmp_cmdline, boot_command_line, COMMAND_LINE_SIZE)
		parse_early_options(tmp_cmdline)
			parse_args("early options", cmdline, NULL, 0, 0, 0, NULL, do_early_param)	//循环取出启动参数中以空格分开的各个配置
				do_early_param()														//每个配置调用该函数，去循环匹配.init.setup段中str
					p->setup_func(val);													//匹配上就调用



#define __setup_param(str, unique_id, fn, early)			\					//./include\linux\init.h
	static const char __setup_str_##unique_id[] __initconst		\
		__aligned(1) = str; 					\
	static struct obs_kernel_param __setup_##unique_id		\
		__used __section(.init.setup)				\
		__attribute__((aligned((sizeof(long)))))		\
		= { __setup_str_##unique_id, fn, early }

		={									//放在.init.setup段中
			.str = "video=";
			.setup_func = video_setup;
			.early = 0;
		}


#define __setup(str, fn)						\
	__setup_param(str, fn, fn, 0)

#define early_param(str, fn)						\
	__setup_param(str, fn, fn, 1)

===================================================================================================


__setup 宏的作用是根据传入的字符串参数，与bootloader传递的参数进行匹配，从而调用传入的函数，如：


static int __init video_setup(char *options)
{
    printk("%s\n", options);
    return 1;
}
__setup("video=", video_setup);

 

假如bootloader传给kernel的参数是"video=xxxxx"，则会调用 video_setup 函数，printk 输出"xxxxx"


