
setup_arch()
	...
	early_fixmap_init();					//初始化fixmap段内存的pgd、pud、pmd
	early_ioremap_setup();					//设置动态申请释放的fixmap段
	
	setup_machine_fdt(__fdt_pointer);		//__fdt_pointer参数在head.s阶段保存的x0设备树地址，解析设备树的ramdisk、bootargs、address/size-cells、memory等信息，并把memory添加到memblock数组中
	
	parse_early_param();					//驱动中有定义early_param("xx",func)会放到".init.setup"段中，且启动参数中有对应的xx字符，则会调用func函数
	
	local_daif_restore(DAIF_PROCCTX_NOIRQ);
		write_sysreg(0x00000080, daif);		//使能fiq(但armv8中应该是无用)、SError、Watchpoint、Breakpoint、Software Step等异常

	cpu_uninstall_idmap();					//idmap的页表基地址ttbr0_el1设置为empty_zero_page,无效所有的tlb，mmu的缓存

	xen_early_init();						//未支持
	
	efi_init();								//一般嵌入式未使用
	
	arm64_memblock_init();					//除了基本的memblock管理，代码中还会定义RESERVEDMEM_OF_DECLARE()的compatible和函数，遍历所有reserved-memory节点确认是否匹配compatible来调用对应的函数

	paging_init();							//主要是重新设置swapper_pg_dir，替换init_pg_end，并释放之前的init_pg_end对应的memblock
		map_kernel()						//以swapper_pg_dir为页表基地址重新映射内核镜像的_text、__start_rodata、__inittext_begin、__initdata_begin、_data
		map_mem()							///以swapper_pg_dir为页表基地址线性映射所有内存

	acpi_table_upgrade();					//ACPI – the Advanced Configuration & Power Interface;是Intel（i386，x86_64，IA64）平台的标准固件规范，绝大部分OS需要从BIOS得到的信息都可以从ACPI得到
	acpi_boot_table_init();

	unflatten_device_tree();				//展开设备树



















